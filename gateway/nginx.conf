load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {

#    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    ##include /etc/nginx/conf.d/*.conf;
    lua_package_cpath '/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;;';
    init_by_lua 'cjson = require "cjson"';

    server {
        location / {
            root /usr/share/nginx/html;
        }

        location /service1 {
            default_type application/json;
            return 200 '{"attr1":"val1"}';
        }

        location /service2 {
            default_type application/json;
            return 200 '{"attr2":"val2"}';
        }  

location /batch {
    # MIME type determined by default_type:
    default_type application/json;

    content_by_lua_block {
        local res1,res2 = ngx.location.capture_multi({{'/service1'},{'/service2'}})
        local results = {api1 = cjson.decode(res1.body), api2 = cjson.decode(res2.body)}
        ngx.say(cjson.encode(results))
    }
}


        # JWT validation
        location /private/ {
            auth_jwt "your-realm"; # For AAD, use tenant ID
            auth_jwt_key_file /etc/nginx/auth.jwk;
        }

    }
}
